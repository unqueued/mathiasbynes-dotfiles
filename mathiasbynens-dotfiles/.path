# This should not be for ~/bin and /usr/local/bin

# TODO: Should I only conditionally add these to path if they exist?

# TODO: A good pattern for modules would be that each one just sets like an OS constraint variable and a path variable, and then the rest is handled by a loop... this is a good idea...


# Python
export PATH="$HOME/.local/bin:$PATH"
# root?

# node.js
export PATH="$HOME/node_modules/.bin:/usr/local/lib/node_modules/.bin:$PATH"

# Rust
export PATH="$HOME/.cargo/bin:$PATH"
# root?

# Go
export PATH="$HOME/go/bin:$PATH"
# root?

# Ruby
# https://wiki.archlinux.org/index.php/Ruby
# Possible to cache this?
PATH="$PATH:$(ruby -e 'puts Gem.user_dir')/bin"
# root?

# Perl
#PATH="~/perl5/bin${PATH:+:${PATH}}"; export PATH;
#PERL5LIB="~/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
#PERL_LOCAL_LIB_ROOT="~/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
#PERL_MB_OPT="--install_base \"~/perl5\""; export PERL_MB_OPT;
#PERL_MM_OPT="INSTALL_BASE="~/perl5"; export PERL_MM_OPT;

# homebrew coreutils, conditional
coreutils_path="/usr/local/opt/coreutils/libexec/gnubin"
[ -r "$coreutils_path" ] && [ -d "$coreutils_path" ] && PATH="$coreutils_path:$PATH"

# TODO:
# Make pathcheck function or something...
# Maybe should break out into individual files, just to make diffing easier...

# TODO: Detect OS, conditional sourcing
# https://stackoverflow.com/questions/394230/how-to-detect-the-os-from-a-bash-script

